#Algorithms_Data Structures:
Exercise 2: E-commerce Platform Search Function
Step 1: Understand Asymptotic Notation
i) Explain Big O notation and how it helps in analyzing algorithms
Big O notation is used to describe the time complexity (or space complexity) of an algorithm in terms of input size n. It tells you how the performance scales as the data grows.
Uses:
•	Helps evaluate efficiency of algorithms
•	Allows for comparing different algorithms
•	Predicts performance at scale (e.g., 1,000 vs 1,000,000 products)
ii) Describe the best, average, and worst-case scenarios for search operations.
Algorithm	Best Case	Average Case	Worst Case
Linear Search	O(1)	O(n)	O(n)
Binary Search	O(1)	O(log n)	O(log n)
Binary search is always faster for large sorted datasets.

Step 4: Analysis & Conclusion
i) Compare the time complexity of linear and binary search algorithms.
Time Complexity Comparison
Algorithm	Time Complexity	Requires Sorting?	Suitable for
Linear Search	O(n)	 No	Small datasets, unsorted
Binary Search	O(log n)	 Yes	Large datasets, sorted
ii) Discuss which algorithm is more suitable for your platform and why.
 Binary Search is better for performance, especially on large sorted data.
 Linear Search works when:
•	Dataset is small
•	Dataset is not sorted
•	Simplicity is prioritized

